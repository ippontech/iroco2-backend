spring.flyway.baseline-on-migrate=true
spring.flyway.locations=classpath:db/migration
spring.datasource.url=jdbc:postgresql://${IROCO2_DATA_SOURCE_URL}/${DATABASE_NAME}
spring.datasource.username=${IROCO2_DATA_SOURCE_USERNAME}
spring.datasource.password=${IROCO2_DATA_SOURCE_PASSWORD}
spring.datasource.driverClassName=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.open-in-view=true
spring.flyway.url=jdbc:postgresql://${IROCO2_DATA_SOURCE_URL}/${DATABASE_NAME}
spring.flyway.user=${IROCO2_DATA_SOURCE_FLYWAY_USERNAME}
spring.flyway.password=${IROCO2_DATA_SOURCE_FLYWAY_PASSWORD}
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
cors.allowed-origins=${IROCO2_CORS_ALLOWED_ORIGINS}
spring.banner.location=classpath:/banner/iroco2banner.txt
spring.cloud.aws.region.static=${IROCO2_AWS_REGION_STATIC}
spring.cloud.aws.sqs.endpoint=${IROCO2_AWS_SQS_QUEUE_ENDPOINT}
spring.cloud.aws.sqs.listener.max-concurrent-messages=1
spring.cloud.aws.sqs.listener.max-messages-per-poll=1
aws.sqs.analyzer.queue.name=${IROCO2_AWS_ANALYZER_SQS_QUEUE_NAME}
aws.sqs.scanner.queue.name=${IROCO2_AWS_SCANNER_SQS_QUEUE_NAME}
aws.s3.bucketName=${S3_BUCKET_NAME}
aws.kms.key-arn=${IROCO2_KMS_IDENTITY_KEY_ID}
aws.kms.public-key=${IROCO2_KMS_IDENTITY_PUBLIC_KEY}
# Security
clerk.issuer=${IROCO2_CLERK_ISSUER}
clerk.audience=${IROCO2_CLERK_AUDIENCE}
clerk.public.key=${IROCO2_CLERK_PUBLIC_KEY}
jwt.issuer=${JWT_ISSUER}
jwt.audience=${JWT_AUDIENCE}
iroco2.authentication.activate=true
# Actuator
management.endpoints.web.exposure.include=health,info,caches,metrics
# Actuator/Management
management.endpoints.web.cors.allowed-methods=GET,POST,DELETE
management.endpoints.web.cors.allowed-headers=*
management.endpoints.web.cors.allowed-origins=${IROCO2_CORS_ALLOWED_ORIGINS}
# Caching
spring.cache.cache-names=regions
